/* 
 * ProductTracing Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DigiKey.Api.Client;
using DigiKey.Api.Model;
using System.Threading.Tasks;

namespace DigiKey.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductTracingApi
    {
        /// <summary>
        /// Retrieve detailed information about the product being traced
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tracingId">The tracing Id of the product being traced</param>
        /// <returns>Task of ProductTracingResponse</returns>
        Task<ProductTracingResponse> Details(string tracingId);

        /// <summary>
        /// Retrieve detailed information about the product being traced
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tracingId">The tracing Id of the product being traced</param>
        /// <returns>Task of ApiResponse (ProductTracingResponse)</returns>
        Task<ApiResponse<ProductTracingResponse>> DetailsWithHttpInfo(string tracingId);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductTracingApi : BaseApi, IProductTracingApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTracingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductTracingApi()
        {
        }

        /// <summary>
        /// Retrieve detailed information about the product being traced 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tracingId">The tracing Id of the product being traced</param>
        /// <returns>Task of ProductTracingResponse</returns>
        public async Task<ProductTracingResponse> Details(string tracingId)
        {
             ApiResponse<ProductTracingResponse> localVarResponse = await DetailsWithHttpInfo(tracingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve detailed information about the product being traced 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tracingId">The tracing Id of the product being traced</param>
        /// <returns>Task of ApiResponse (ProductTracingResponse)</returns>
        public async Task<ApiResponse<ProductTracingResponse>> DetailsWithHttpInfo(string tracingId)
        {
            // verify the required parameter 'tracingId' is set
            if (tracingId == null)
                throw new ApiException(400, "Missing required parameter 'tracingId' when calling ProductTracingApi->Details");
            
            var path = $"/Details/{tracingId}";

            RestResponse response = await MakeGetRequest(path);

            int statusCode = (int)response.StatusCode;

            if (ApiClient.ExceptionFactory != null)
            {
                Exception exception = ApiClient.ExceptionFactory("Details", response);
                if (exception != null && !(statusCode == 429 && !ApiClient.Instance.ThrowRateLimitExceptions)) throw exception;
            }

            return new ApiResponse<ProductTracingResponse>(statusCode, response.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
               ApiClient.Instance.Deserialize<ProductTracingResponse>(response));
        }

    }
}
