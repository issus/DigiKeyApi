/* 
 * PartSearch Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;


namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// Parameters for filtering that are limited to parameters for the products in the response.
    /// </summary>
    [DataContract]
    public partial class LimitedParameter : IEquatable<LimitedParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LimitedParameter" /> class.
        /// </summary>
        /// <param name="values">List of values for the parameter that are contained in the products..</param>
        /// <param name="parameterId">The Id of the parameter..</param>
        /// <param name="_parameter">The name of the parameter..</param>
        public LimitedParameter(List<ValuePair> values = default(List<ValuePair>), int? parameterId = default(int?), string _parameter = default(string))
        {
            this.Values = values;
            this.ParameterId = parameterId;
            this.Parameter = _parameter;
        }

        /// <summary>
        /// List of values for the parameter that are contained in the products.
        /// </summary>
        /// <value>List of values for the parameter that are contained in the products.</value>
        [DataMember(Name = "Values", EmitDefaultValue = false)]
        public List<ValuePair> Values { get; set; }

        /// <summary>
        /// The Id of the parameter.
        /// </summary>
        /// <value>The Id of the parameter.</value>
        [DataMember(Name = "ParameterId", EmitDefaultValue = false)]
        public int? ParameterId { get; set; }

        /// <summary>
        /// The name of the parameter.
        /// </summary>
        /// <value>The name of the parameter.</value>
        [DataMember(Name = "Parameter", EmitDefaultValue = false)]
        public string Parameter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LimitedParameter {\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  ParameterId: ").Append(ParameterId).Append("\n");
            sb.Append("  Parameter: ").Append(Parameter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LimitedParameter);
        }

        /// <summary>
        /// Returns true if LimitedParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of LimitedParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LimitedParameter input)
        {
            if (input == null)
                return false;

            return
               (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) &&
               (
                    this.ParameterId == input.ParameterId ||
                   (this.ParameterId != null &&
                    this.ParameterId.Equals(input.ParameterId))
                ) &&
               (
                    this.Parameter == input.Parameter ||
                   (this.Parameter != null &&
                    this.Parameter.Equals(input.Parameter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.ParameterId != null)
                    hashCode = hashCode * 59 + this.ParameterId.GetHashCode();
                if (this.Parameter != null)
                    hashCode = hashCode * 59 + this.Parameter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
