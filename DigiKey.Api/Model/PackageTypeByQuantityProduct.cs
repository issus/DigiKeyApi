/* 
 * PackageTypeByQuantity Api
 *
 * PackageTypeByQuantity searches Digi-Key products and tries to find the best package types to purchase given a requested quantity and optional packaging preference. Made for Cut Tape, Tape and Reel, and Digi-Reel products.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace DigiKey.Api.Model
{
    /// <summary>
    /// Part information returned by PackageTypeByQuantity Search Service
    /// </summary>
    [DataContract]
    public partial class PackageTypeByQuantityProduct :  IEquatable<PackageTypeByQuantityProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageTypeByQuantityProduct" /> class.
        /// </summary>
        /// <param name="recommendedQuantity">The quantity of this package type that is recommended given the provided quantity..</param>
        /// <param name="myPricing">Your pricing for the account with which you authenticated. Also dependent on locale information..</param>
        /// <param name="obsolete">Indicates whether this Part is obsolete..</param>
        /// <param name="mediaLinks">Collection of MediaLinks objects. These can contain links to datasheets, photos or manuals..</param>
        /// <param name="standardPackage">The number of products in the manufacturer&#39;s standard package..</param>
        /// <param name="limitedTaxonomy">limitedTaxonomy.</param>
        /// <param name="kits">Kits that this product is contained in..</param>
        /// <param name="kitContents">Products contained within this product. Only applicable if this product is a kit..</param>
        /// <param name="matingProducts">An association of same manufacturer products that mate with each other..</param>
        /// <param name="searchLocaleUsed">searchLocaleUsed.</param>
        /// <param name="associatedProducts">Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ..</param>
        /// <param name="forUseWithProducts">Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ..</param>
        /// <param name="rohsSubs">Rohs substitutions.</param>
        /// <param name="suggestedSubs">Suggested substitutions for when the product is obsolete..</param>
        /// <param name="additionalValueFee">Any additional value fee. Most commonly the Digi-Reel fee. May be used for programmable parts as well..</param>
        /// <param name="reachEffectiveDate">REACH effective date is string in format \&quot;MMM-yyyy\&quot; or blank \&quot;\&quot;.  REACH is a regulation of the European Union. See documentation from the European Chemicals Agency..</param>
        /// <param name="standardPricing">Standard pricing for the validated locale..</param>
        /// <param name="roHSStatus">RoHS status. Can be: RoHS Compliant, RoHS non-compliant, RoHS Compliant By Exemption, Not Applicable, Vendor  undefined, Request Inventory Verification, ROHS3 Compliant..</param>
        /// <param name="leadStatus">Lead status. Can be: Lead Free, Contains lead, Lead Free By Exemption, Not Applicable, Vendor undefined, unknown,  or Request Inventory Verification..</param>
        /// <param name="parameters">Parameters for the part. Can be used for filtering keyword searches..</param>
        /// <param name="productUrl">Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values..</param>
        /// <param name="primaryDatasheet">The URL to the product&#39;s datasheet..</param>
        /// <param name="primaryPhoto">The URL to the product&#39;s image..</param>
        /// <param name="primaryVideo">The URL to the product&#39;s video..</param>
        /// <param name="series">series.</param>
        /// <param name="manufacturerLeadWeeks">The number of weeks expected to receive stock from manufacturer..</param>
        /// <param name="manufacturerPageUrl">The URL to Digi-Key&#39;s page on the manufacturer..</param>
        /// <param name="productStatus">Status of the product. Options include: Active, Obsolete, Discontinued at Digi-Key, Last Time Buy, Not For New  Designs, Preliminary. For obsolete parts the part will become a non-stocking item when stock is depleted; minimums  will apply. Order the quantity available or the quantity available plus a multiple of the minimum order quantity..</param>
        /// <param name="dateLastBuyChance">Last date that the product will be available for purchase. Date is in ISO 8601..</param>
        /// <param name="alternatePackaging">Other packaging types available for this product..</param>
        /// <param name="detailedDescription">Extended catalog description of the product..</param>
        /// <param name="reachStatus">REACH is a regulation of the European Union. See documentation from the European Chemicals Agency..</param>
        /// <param name="exportControlClassNumber">Export control class number. See documentation from the U.S. Department of Commerce..</param>
        /// <param name="hTSUSCode">Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission..</param>
        /// <param name="tariffDescription">Description of the tariff status. Only applies if purchasing in USD and shipping to the US. Valid options are No  Tariff and Tariff Applied..</param>
        /// <param name="manufacturerPartNumber">The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts..</param>
        /// <param name="minimumOrderQuantity">The minimum quantity to order from Digi-Key..</param>
        /// <param name="nonStock">Indicates this product is a non stock product..</param>
        /// <param name="packaging">packaging.</param>
        /// <param name="quantityAvailable">Quantity of the product available for immediate sale..</param>
        /// <param name="digiKeyPartNumber">The Digi-Key part number..</param>
        /// <param name="productDescription">Catalog description of the product..</param>
        /// <param name="unitPrice">The price for a single unit of this product..</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="manufacturerPublicQuantity">Quantity of this product available to order from manufacturer..</param>
        /// <param name="quantityOnOrder">Quantity of this product ordered but not immediately available..</param>
        /// <param name="dKPlusRestriction">If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site.</param>
        /// <param name="supplierDirectShip">If true- this product is shipped directly from the Supplier.</param>
        public PackageTypeByQuantityProduct(int? recommendedQuantity = default(int?), List<PriceBreak> myPricing = default(List<PriceBreak>), bool? obsolete = default(bool?), List<MediaLinks> mediaLinks = default(List<MediaLinks>), int? standardPackage = default(int?), LimitedTaxonomy limitedTaxonomy = default(LimitedTaxonomy), List<AssociatedProduct> kits = default(List<AssociatedProduct>), List<KitPart> kitContents = default(List<KitPart>), List<AssociatedProduct> matingProducts = default(List<AssociatedProduct>), IsoSearchLocale searchLocaleUsed = default(IsoSearchLocale), List<AssociatedProduct> associatedProducts = default(List<AssociatedProduct>), List<AssociatedProduct> forUseWithProducts = default(List<AssociatedProduct>), List<AssociatedProduct> rohsSubs = default(List<AssociatedProduct>), List<AssociatedProduct> suggestedSubs = default(List<AssociatedProduct>), double? additionalValueFee = default(double?), string reachEffectiveDate = default(string), List<PriceBreak> standardPricing = default(List<PriceBreak>), string roHSStatus = default(string), string leadStatus = default(string), List<PidVid> parameters = default(List<PidVid>), string productUrl = default(string), string primaryDatasheet = default(string), string primaryPhoto = default(string), string primaryVideo = default(string), PidVid series = default(PidVid), string manufacturerLeadWeeks = default(string), string manufacturerPageUrl = default(string), string productStatus = default(string), DateTime? dateLastBuyChance = default(DateTime?), List<BasicProduct> alternatePackaging = default(List<BasicProduct>), string detailedDescription = default(string), string reachStatus = default(string), string exportControlClassNumber = default(string), string hTSUSCode = default(string), string tariffDescription = default(string), string manufacturerPartNumber = default(string), int? minimumOrderQuantity = default(int?), bool? nonStock = default(bool?), PidVid packaging = default(PidVid), int? quantityAvailable = default(int?), string digiKeyPartNumber = default(string), string productDescription = default(string), double? unitPrice = default(double?), PidVid manufacturer = default(PidVid), int? manufacturerPublicQuantity = default(int?), int? quantityOnOrder = default(int?), bool? dKPlusRestriction = default(bool?), bool? supplierDirectShip = default(bool?))
        {
            this.RecommendedQuantity = recommendedQuantity;
            this.MyPricing = myPricing;
            this.Obsolete = obsolete;
            this.MediaLinks = mediaLinks;
            this.StandardPackage = standardPackage;
            this.LimitedTaxonomy = limitedTaxonomy;
            this.Kits = kits;
            this.KitContents = kitContents;
            this.MatingProducts = matingProducts;
            this.SearchLocaleUsed = searchLocaleUsed;
            this.AssociatedProducts = associatedProducts;
            this.ForUseWithProducts = forUseWithProducts;
            this.RohsSubs = rohsSubs;
            this.SuggestedSubs = suggestedSubs;
            this.AdditionalValueFee = additionalValueFee;
            this.ReachEffectiveDate = reachEffectiveDate;
            this.StandardPricing = standardPricing;
            this.RoHSStatus = roHSStatus;
            this.LeadStatus = leadStatus;
            this.Parameters = parameters;
            this.ProductUrl = productUrl;
            this.PrimaryDatasheet = primaryDatasheet;
            this.PrimaryPhoto = primaryPhoto;
            this.PrimaryVideo = primaryVideo;
            this.Series = series;
            this.ManufacturerLeadWeeks = manufacturerLeadWeeks;
            this.ManufacturerPageUrl = manufacturerPageUrl;
            this.ProductStatus = productStatus;
            this.DateLastBuyChance = dateLastBuyChance;
            this.AlternatePackaging = alternatePackaging;
            this.DetailedDescription = detailedDescription;
            this.ReachStatus = reachStatus;
            this.ExportControlClassNumber = exportControlClassNumber;
            this.HTSUSCode = hTSUSCode;
            this.TariffDescription = tariffDescription;
            this.ManufacturerPartNumber = manufacturerPartNumber;
            this.MinimumOrderQuantity = minimumOrderQuantity;
            this.NonStock = nonStock;
            this.Packaging = packaging;
            this.QuantityAvailable = quantityAvailable;
            this.DigiKeyPartNumber = digiKeyPartNumber;
            this.ProductDescription = productDescription;
            this.UnitPrice = unitPrice;
            this.Manufacturer = manufacturer;
            this.ManufacturerPublicQuantity = manufacturerPublicQuantity;
            this.QuantityOnOrder = quantityOnOrder;
            this.DKPlusRestriction = dKPlusRestriction;
            this.SupplierDirectShip = supplierDirectShip;
        }
        
        /// <summary>
        /// The quantity of this package type that is recommended given the provided quantity.
        /// </summary>
        /// <value>The quantity of this package type that is recommended given the provided quantity.</value>
        [DataMember(Name="RecommendedQuantity", EmitDefaultValue=false)]
        public int? RecommendedQuantity { get; set; }

        /// <summary>
        /// Your pricing for the account with which you authenticated. Also dependent on locale information.
        /// </summary>
        /// <value>Your pricing for the account with which you authenticated. Also dependent on locale information.</value>
        [DataMember(Name="MyPricing", EmitDefaultValue=false)]
        public List<PriceBreak> MyPricing { get; set; }

        /// <summary>
        /// Indicates whether this Part is obsolete.
        /// </summary>
        /// <value>Indicates whether this Part is obsolete.</value>
        [DataMember(Name="Obsolete", EmitDefaultValue=false)]
        public bool? Obsolete { get; set; }

        /// <summary>
        /// Collection of MediaLinks objects. These can contain links to datasheets, photos or manuals.
        /// </summary>
        /// <value>Collection of MediaLinks objects. These can contain links to datasheets, photos or manuals.</value>
        [DataMember(Name="MediaLinks", EmitDefaultValue=false)]
        public List<MediaLinks> MediaLinks { get; set; }

        /// <summary>
        /// The number of products in the manufacturer&#39;s standard package.
        /// </summary>
        /// <value>The number of products in the manufacturer&#39;s standard package.</value>
        [DataMember(Name="StandardPackage", EmitDefaultValue=false)]
        public int? StandardPackage { get; set; }

        /// <summary>
        /// Gets or Sets LimitedTaxonomy
        /// </summary>
        [DataMember(Name="LimitedTaxonomy", EmitDefaultValue=false)]
        public LimitedTaxonomy LimitedTaxonomy { get; set; }

        /// <summary>
        /// Kits that this product is contained in.
        /// </summary>
        /// <value>Kits that this product is contained in.</value>
        [DataMember(Name="Kits", EmitDefaultValue=false)]
        public List<AssociatedProduct> Kits { get; set; }

        /// <summary>
        /// Products contained within this product. Only applicable if this product is a kit.
        /// </summary>
        /// <value>Products contained within this product. Only applicable if this product is a kit.</value>
        [DataMember(Name="KitContents", EmitDefaultValue=false)]
        public List<KitPart> KitContents { get; set; }

        /// <summary>
        /// An association of same manufacturer products that mate with each other.
        /// </summary>
        /// <value>An association of same manufacturer products that mate with each other.</value>
        [DataMember(Name="MatingProducts", EmitDefaultValue=false)]
        public List<AssociatedProduct> MatingProducts { get; set; }

        /// <summary>
        /// Gets or Sets SearchLocaleUsed
        /// </summary>
        [DataMember(Name="SearchLocaleUsed", EmitDefaultValue=false)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

        /// <summary>
        /// Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.
        /// </summary>
        /// <value>Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.</value>
        [DataMember(Name="AssociatedProducts", EmitDefaultValue=false)]
        public List<AssociatedProduct> AssociatedProducts { get; set; }

        /// <summary>
        /// Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.
        /// </summary>
        /// <value>Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.</value>
        [DataMember(Name="ForUseWithProducts", EmitDefaultValue=false)]
        public List<AssociatedProduct> ForUseWithProducts { get; set; }

        /// <summary>
        /// Rohs substitutions
        /// </summary>
        /// <value>Rohs substitutions</value>
        [DataMember(Name="RohsSubs", EmitDefaultValue=false)]
        public List<AssociatedProduct> RohsSubs { get; set; }

        /// <summary>
        /// Suggested substitutions for when the product is obsolete.
        /// </summary>
        /// <value>Suggested substitutions for when the product is obsolete.</value>
        [DataMember(Name="SuggestedSubs", EmitDefaultValue=false)]
        public List<AssociatedProduct> SuggestedSubs { get; set; }

        /// <summary>
        /// Any additional value fee. Most commonly the Digi-Reel fee. May be used for programmable parts as well.
        /// </summary>
        /// <value>Any additional value fee. Most commonly the Digi-Reel fee. May be used for programmable parts as well.</value>
        [DataMember(Name="AdditionalValueFee", EmitDefaultValue=false)]
        public double? AdditionalValueFee { get; set; }

        /// <summary>
        /// REACH effective date is string in format \&quot;MMM-yyyy\&quot; or blank \&quot;\&quot;.  REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.
        /// </summary>
        /// <value>REACH effective date is string in format \&quot;MMM-yyyy\&quot; or blank \&quot;\&quot;.  REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.</value>
        [DataMember(Name="ReachEffectiveDate", EmitDefaultValue=false)]
        public string ReachEffectiveDate { get; set; }

        /// <summary>
        /// Standard pricing for the validated locale.
        /// </summary>
        /// <value>Standard pricing for the validated locale.</value>
        [DataMember(Name="StandardPricing", EmitDefaultValue=false)]
        public List<PriceBreak> StandardPricing { get; set; }

        /// <summary>
        /// RoHS status. Can be: RoHS Compliant, RoHS non-compliant, RoHS Compliant By Exemption, Not Applicable, Vendor  undefined, Request Inventory Verification, ROHS3 Compliant.
        /// </summary>
        /// <value>RoHS status. Can be: RoHS Compliant, RoHS non-compliant, RoHS Compliant By Exemption, Not Applicable, Vendor  undefined, Request Inventory Verification, ROHS3 Compliant.</value>
        [DataMember(Name="RoHSStatus", EmitDefaultValue=false)]
        public string RoHSStatus { get; set; }

        /// <summary>
        /// Lead status. Can be: Lead Free, Contains lead, Lead Free By Exemption, Not Applicable, Vendor undefined, unknown,  or Request Inventory Verification.
        /// </summary>
        /// <value>Lead status. Can be: Lead Free, Contains lead, Lead Free By Exemption, Not Applicable, Vendor undefined, unknown,  or Request Inventory Verification.</value>
        [DataMember(Name="LeadStatus", EmitDefaultValue=false)]
        public string LeadStatus { get; set; }

        /// <summary>
        /// Parameters for the part. Can be used for filtering keyword searches.
        /// </summary>
        /// <value>Parameters for the part. Can be used for filtering keyword searches.</value>
        [DataMember(Name="Parameters", EmitDefaultValue=false)]
        public List<PidVid> Parameters { get; set; }

        /// <summary>
        /// Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.
        /// </summary>
        /// <value>Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.</value>
        [DataMember(Name="ProductUrl", EmitDefaultValue=false)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// The URL to the product&#39;s datasheet.
        /// </summary>
        /// <value>The URL to the product&#39;s datasheet.</value>
        [DataMember(Name="PrimaryDatasheet", EmitDefaultValue=false)]
        public string PrimaryDatasheet { get; set; }

        /// <summary>
        /// The URL to the product&#39;s image.
        /// </summary>
        /// <value>The URL to the product&#39;s image.</value>
        [DataMember(Name="PrimaryPhoto", EmitDefaultValue=false)]
        public string PrimaryPhoto { get; set; }

        /// <summary>
        /// The URL to the product&#39;s video.
        /// </summary>
        /// <value>The URL to the product&#39;s video.</value>
        [DataMember(Name="PrimaryVideo", EmitDefaultValue=false)]
        public string PrimaryVideo { get; set; }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name="Series", EmitDefaultValue=false)]
        public PidVid Series { get; set; }

        /// <summary>
        /// The number of weeks expected to receive stock from manufacturer.
        /// </summary>
        /// <value>The number of weeks expected to receive stock from manufacturer.</value>
        [DataMember(Name="ManufacturerLeadWeeks", EmitDefaultValue=false)]
        public string ManufacturerLeadWeeks { get; set; }

        /// <summary>
        /// The URL to Digi-Key&#39;s page on the manufacturer.
        /// </summary>
        /// <value>The URL to Digi-Key&#39;s page on the manufacturer.</value>
        [DataMember(Name="ManufacturerPageUrl", EmitDefaultValue=false)]
        public string ManufacturerPageUrl { get; set; }

        /// <summary>
        /// Status of the product. Options include: Active, Obsolete, Discontinued at Digi-Key, Last Time Buy, Not For New  Designs, Preliminary. For obsolete parts the part will become a non-stocking item when stock is depleted; minimums  will apply. Order the quantity available or the quantity available plus a multiple of the minimum order quantity.
        /// </summary>
        /// <value>Status of the product. Options include: Active, Obsolete, Discontinued at Digi-Key, Last Time Buy, Not For New  Designs, Preliminary. For obsolete parts the part will become a non-stocking item when stock is depleted; minimums  will apply. Order the quantity available or the quantity available plus a multiple of the minimum order quantity.</value>
        [DataMember(Name="ProductStatus", EmitDefaultValue=false)]
        public string ProductStatus { get; set; }

        /// <summary>
        /// Last date that the product will be available for purchase. Date is in ISO 8601.
        /// </summary>
        /// <value>Last date that the product will be available for purchase. Date is in ISO 8601.</value>
        [DataMember(Name="DateLastBuyChance", EmitDefaultValue=false)]
        public DateTime? DateLastBuyChance { get; set; }

        /// <summary>
        /// Other packaging types available for this product.
        /// </summary>
        /// <value>Other packaging types available for this product.</value>
        [DataMember(Name="AlternatePackaging", EmitDefaultValue=false)]
        public List<BasicProduct> AlternatePackaging { get; set; }

        /// <summary>
        /// Extended catalog description of the product.
        /// </summary>
        /// <value>Extended catalog description of the product.</value>
        [DataMember(Name="DetailedDescription", EmitDefaultValue=false)]
        public string DetailedDescription { get; set; }

        /// <summary>
        /// REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.
        /// </summary>
        /// <value>REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.</value>
        [DataMember(Name="ReachStatus", EmitDefaultValue=false)]
        public string ReachStatus { get; set; }

        /// <summary>
        /// Export control class number. See documentation from the U.S. Department of Commerce.
        /// </summary>
        /// <value>Export control class number. See documentation from the U.S. Department of Commerce.</value>
        [DataMember(Name="ExportControlClassNumber", EmitDefaultValue=false)]
        public string ExportControlClassNumber { get; set; }

        /// <summary>
        /// Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.
        /// </summary>
        /// <value>Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.</value>
        [DataMember(Name="HTSUSCode", EmitDefaultValue=false)]
        public string HTSUSCode { get; set; }

        /// <summary>
        /// Description of the tariff status. Only applies if purchasing in USD and shipping to the US. Valid options are No  Tariff and Tariff Applied.
        /// </summary>
        /// <value>Description of the tariff status. Only applies if purchasing in USD and shipping to the US. Valid options are No  Tariff and Tariff Applied.</value>
        [DataMember(Name="TariffDescription", EmitDefaultValue=false)]
        public string TariffDescription { get; set; }

        /// <summary>
        /// The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts.
        /// </summary>
        /// <value>The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts.</value>
        [DataMember(Name="ManufacturerPartNumber", EmitDefaultValue=false)]
        public string ManufacturerPartNumber { get; set; }

        /// <summary>
        /// The minimum quantity to order from Digi-Key.
        /// </summary>
        /// <value>The minimum quantity to order from Digi-Key.</value>
        [DataMember(Name="MinimumOrderQuantity", EmitDefaultValue=false)]
        public int? MinimumOrderQuantity { get; set; }

        /// <summary>
        /// Indicates this product is a non stock product.
        /// </summary>
        /// <value>Indicates this product is a non stock product.</value>
        [DataMember(Name="NonStock", EmitDefaultValue=false)]
        public bool? NonStock { get; set; }

        /// <summary>
        /// Gets or Sets Packaging
        /// </summary>
        [DataMember(Name="Packaging", EmitDefaultValue=false)]
        public PidVid Packaging { get; set; }

        /// <summary>
        /// Quantity of the product available for immediate sale.
        /// </summary>
        /// <value>Quantity of the product available for immediate sale.</value>
        [DataMember(Name="QuantityAvailable", EmitDefaultValue=false)]
        public int? QuantityAvailable { get; set; }

        /// <summary>
        /// The Digi-Key part number.
        /// </summary>
        /// <value>The Digi-Key part number.</value>
        [DataMember(Name="DigiKeyPartNumber", EmitDefaultValue=false)]
        public string DigiKeyPartNumber { get; set; }

        /// <summary>
        /// Catalog description of the product.
        /// </summary>
        /// <value>Catalog description of the product.</value>
        [DataMember(Name="ProductDescription", EmitDefaultValue=false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// The price for a single unit of this product.
        /// </summary>
        /// <value>The price for a single unit of this product.</value>
        [DataMember(Name="UnitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name="Manufacturer", EmitDefaultValue=false)]
        public PidVid Manufacturer { get; set; }

        /// <summary>
        /// Quantity of this product available to order from manufacturer.
        /// </summary>
        /// <value>Quantity of this product available to order from manufacturer.</value>
        [DataMember(Name="ManufacturerPublicQuantity", EmitDefaultValue=false)]
        public int? ManufacturerPublicQuantity { get; set; }

        /// <summary>
        /// Quantity of this product ordered but not immediately available.
        /// </summary>
        /// <value>Quantity of this product ordered but not immediately available.</value>
        [DataMember(Name="QuantityOnOrder", EmitDefaultValue=false)]
        public int? QuantityOnOrder { get; set; }

        /// <summary>
        /// If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site
        /// </summary>
        /// <value>If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site</value>
        [DataMember(Name="DKPlusRestriction", EmitDefaultValue=false)]
        public bool? DKPlusRestriction { get; set; }

        /// <summary>
        /// If true- this product is shipped directly from the Supplier
        /// </summary>
        /// <value>If true- this product is shipped directly from the Supplier</value>
        [DataMember(Name="SupplierDirectShip", EmitDefaultValue=false)]
        public bool? SupplierDirectShip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageTypeByQuantityProduct {\n");
            sb.Append("  RecommendedQuantity: ").Append(RecommendedQuantity).Append("\n");
            sb.Append("  MyPricing: ").Append(MyPricing).Append("\n");
            sb.Append("  Obsolete: ").Append(Obsolete).Append("\n");
            sb.Append("  MediaLinks: ").Append(MediaLinks).Append("\n");
            sb.Append("  StandardPackage: ").Append(StandardPackage).Append("\n");
            sb.Append("  LimitedTaxonomy: ").Append(LimitedTaxonomy).Append("\n");
            sb.Append("  Kits: ").Append(Kits).Append("\n");
            sb.Append("  KitContents: ").Append(KitContents).Append("\n");
            sb.Append("  MatingProducts: ").Append(MatingProducts).Append("\n");
            sb.Append("  SearchLocaleUsed: ").Append(SearchLocaleUsed).Append("\n");
            sb.Append("  AssociatedProducts: ").Append(AssociatedProducts).Append("\n");
            sb.Append("  ForUseWithProducts: ").Append(ForUseWithProducts).Append("\n");
            sb.Append("  RohsSubs: ").Append(RohsSubs).Append("\n");
            sb.Append("  SuggestedSubs: ").Append(SuggestedSubs).Append("\n");
            sb.Append("  AdditionalValueFee: ").Append(AdditionalValueFee).Append("\n");
            sb.Append("  ReachEffectiveDate: ").Append(ReachEffectiveDate).Append("\n");
            sb.Append("  StandardPricing: ").Append(StandardPricing).Append("\n");
            sb.Append("  RoHSStatus: ").Append(RoHSStatus).Append("\n");
            sb.Append("  LeadStatus: ").Append(LeadStatus).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ProductUrl: ").Append(ProductUrl).Append("\n");
            sb.Append("  PrimaryDatasheet: ").Append(PrimaryDatasheet).Append("\n");
            sb.Append("  PrimaryPhoto: ").Append(PrimaryPhoto).Append("\n");
            sb.Append("  PrimaryVideo: ").Append(PrimaryVideo).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  ManufacturerLeadWeeks: ").Append(ManufacturerLeadWeeks).Append("\n");
            sb.Append("  ManufacturerPageUrl: ").Append(ManufacturerPageUrl).Append("\n");
            sb.Append("  ProductStatus: ").Append(ProductStatus).Append("\n");
            sb.Append("  DateLastBuyChance: ").Append(DateLastBuyChance).Append("\n");
            sb.Append("  AlternatePackaging: ").Append(AlternatePackaging).Append("\n");
            sb.Append("  DetailedDescription: ").Append(DetailedDescription).Append("\n");
            sb.Append("  ReachStatus: ").Append(ReachStatus).Append("\n");
            sb.Append("  ExportControlClassNumber: ").Append(ExportControlClassNumber).Append("\n");
            sb.Append("  HTSUSCode: ").Append(HTSUSCode).Append("\n");
            sb.Append("  TariffDescription: ").Append(TariffDescription).Append("\n");
            sb.Append("  ManufacturerPartNumber: ").Append(ManufacturerPartNumber).Append("\n");
            sb.Append("  MinimumOrderQuantity: ").Append(MinimumOrderQuantity).Append("\n");
            sb.Append("  NonStock: ").Append(NonStock).Append("\n");
            sb.Append("  Packaging: ").Append(Packaging).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  DigiKeyPartNumber: ").Append(DigiKeyPartNumber).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerPublicQuantity: ").Append(ManufacturerPublicQuantity).Append("\n");
            sb.Append("  QuantityOnOrder: ").Append(QuantityOnOrder).Append("\n");
            sb.Append("  DKPlusRestriction: ").Append(DKPlusRestriction).Append("\n");
            sb.Append("  SupplierDirectShip: ").Append(SupplierDirectShip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageTypeByQuantityProduct);
        }

        /// <summary>
        /// Returns true if PackageTypeByQuantityProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageTypeByQuantityProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageTypeByQuantityProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecommendedQuantity == input.RecommendedQuantity ||
                    (this.RecommendedQuantity != null &&
                    this.RecommendedQuantity.Equals(input.RecommendedQuantity))
                ) && 
                (
                    this.MyPricing == input.MyPricing ||
                    this.MyPricing != null &&
                    this.MyPricing.SequenceEqual(input.MyPricing)
                ) && 
                (
                    this.Obsolete == input.Obsolete ||
                    (this.Obsolete != null &&
                    this.Obsolete.Equals(input.Obsolete))
                ) && 
                (
                    this.MediaLinks == input.MediaLinks ||
                    this.MediaLinks != null &&
                    this.MediaLinks.SequenceEqual(input.MediaLinks)
                ) && 
                (
                    this.StandardPackage == input.StandardPackage ||
                    (this.StandardPackage != null &&
                    this.StandardPackage.Equals(input.StandardPackage))
                ) && 
                (
                    this.LimitedTaxonomy == input.LimitedTaxonomy ||
                    (this.LimitedTaxonomy != null &&
                    this.LimitedTaxonomy.Equals(input.LimitedTaxonomy))
                ) && 
                (
                    this.Kits == input.Kits ||
                    this.Kits != null &&
                    this.Kits.SequenceEqual(input.Kits)
                ) && 
                (
                    this.KitContents == input.KitContents ||
                    this.KitContents != null &&
                    this.KitContents.SequenceEqual(input.KitContents)
                ) && 
                (
                    this.MatingProducts == input.MatingProducts ||
                    this.MatingProducts != null &&
                    this.MatingProducts.SequenceEqual(input.MatingProducts)
                ) && 
                (
                    this.SearchLocaleUsed == input.SearchLocaleUsed ||
                    (this.SearchLocaleUsed != null &&
                    this.SearchLocaleUsed.Equals(input.SearchLocaleUsed))
                ) && 
                (
                    this.AssociatedProducts == input.AssociatedProducts ||
                    this.AssociatedProducts != null &&
                    this.AssociatedProducts.SequenceEqual(input.AssociatedProducts)
                ) && 
                (
                    this.ForUseWithProducts == input.ForUseWithProducts ||
                    this.ForUseWithProducts != null &&
                    this.ForUseWithProducts.SequenceEqual(input.ForUseWithProducts)
                ) && 
                (
                    this.RohsSubs == input.RohsSubs ||
                    this.RohsSubs != null &&
                    this.RohsSubs.SequenceEqual(input.RohsSubs)
                ) && 
                (
                    this.SuggestedSubs == input.SuggestedSubs ||
                    this.SuggestedSubs != null &&
                    this.SuggestedSubs.SequenceEqual(input.SuggestedSubs)
                ) && 
                (
                    this.AdditionalValueFee == input.AdditionalValueFee ||
                    (this.AdditionalValueFee != null &&
                    this.AdditionalValueFee.Equals(input.AdditionalValueFee))
                ) && 
                (
                    this.ReachEffectiveDate == input.ReachEffectiveDate ||
                    (this.ReachEffectiveDate != null &&
                    this.ReachEffectiveDate.Equals(input.ReachEffectiveDate))
                ) && 
                (
                    this.StandardPricing == input.StandardPricing ||
                    this.StandardPricing != null &&
                    this.StandardPricing.SequenceEqual(input.StandardPricing)
                ) && 
                (
                    this.RoHSStatus == input.RoHSStatus ||
                    (this.RoHSStatus != null &&
                    this.RoHSStatus.Equals(input.RoHSStatus))
                ) && 
                (
                    this.LeadStatus == input.LeadStatus ||
                    (this.LeadStatus != null &&
                    this.LeadStatus.Equals(input.LeadStatus))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.ProductUrl == input.ProductUrl ||
                    (this.ProductUrl != null &&
                    this.ProductUrl.Equals(input.ProductUrl))
                ) && 
                (
                    this.PrimaryDatasheet == input.PrimaryDatasheet ||
                    (this.PrimaryDatasheet != null &&
                    this.PrimaryDatasheet.Equals(input.PrimaryDatasheet))
                ) && 
                (
                    this.PrimaryPhoto == input.PrimaryPhoto ||
                    (this.PrimaryPhoto != null &&
                    this.PrimaryPhoto.Equals(input.PrimaryPhoto))
                ) && 
                (
                    this.PrimaryVideo == input.PrimaryVideo ||
                    (this.PrimaryVideo != null &&
                    this.PrimaryVideo.Equals(input.PrimaryVideo))
                ) && 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                ) && 
                (
                    this.ManufacturerLeadWeeks == input.ManufacturerLeadWeeks ||
                    (this.ManufacturerLeadWeeks != null &&
                    this.ManufacturerLeadWeeks.Equals(input.ManufacturerLeadWeeks))
                ) && 
                (
                    this.ManufacturerPageUrl == input.ManufacturerPageUrl ||
                    (this.ManufacturerPageUrl != null &&
                    this.ManufacturerPageUrl.Equals(input.ManufacturerPageUrl))
                ) && 
                (
                    this.ProductStatus == input.ProductStatus ||
                    (this.ProductStatus != null &&
                    this.ProductStatus.Equals(input.ProductStatus))
                ) && 
                (
                    this.DateLastBuyChance == input.DateLastBuyChance ||
                    (this.DateLastBuyChance != null &&
                    this.DateLastBuyChance.Equals(input.DateLastBuyChance))
                ) && 
                (
                    this.AlternatePackaging == input.AlternatePackaging ||
                    this.AlternatePackaging != null &&
                    this.AlternatePackaging.SequenceEqual(input.AlternatePackaging)
                ) && 
                (
                    this.DetailedDescription == input.DetailedDescription ||
                    (this.DetailedDescription != null &&
                    this.DetailedDescription.Equals(input.DetailedDescription))
                ) && 
                (
                    this.ReachStatus == input.ReachStatus ||
                    (this.ReachStatus != null &&
                    this.ReachStatus.Equals(input.ReachStatus))
                ) && 
                (
                    this.ExportControlClassNumber == input.ExportControlClassNumber ||
                    (this.ExportControlClassNumber != null &&
                    this.ExportControlClassNumber.Equals(input.ExportControlClassNumber))
                ) && 
                (
                    this.HTSUSCode == input.HTSUSCode ||
                    (this.HTSUSCode != null &&
                    this.HTSUSCode.Equals(input.HTSUSCode))
                ) && 
                (
                    this.TariffDescription == input.TariffDescription ||
                    (this.TariffDescription != null &&
                    this.TariffDescription.Equals(input.TariffDescription))
                ) && 
                (
                    this.ManufacturerPartNumber == input.ManufacturerPartNumber ||
                    (this.ManufacturerPartNumber != null &&
                    this.ManufacturerPartNumber.Equals(input.ManufacturerPartNumber))
                ) && 
                (
                    this.MinimumOrderQuantity == input.MinimumOrderQuantity ||
                    (this.MinimumOrderQuantity != null &&
                    this.MinimumOrderQuantity.Equals(input.MinimumOrderQuantity))
                ) && 
                (
                    this.NonStock == input.NonStock ||
                    (this.NonStock != null &&
                    this.NonStock.Equals(input.NonStock))
                ) && 
                (
                    this.Packaging == input.Packaging ||
                    (this.Packaging != null &&
                    this.Packaging.Equals(input.Packaging))
                ) && 
                (
                    this.QuantityAvailable == input.QuantityAvailable ||
                    (this.QuantityAvailable != null &&
                    this.QuantityAvailable.Equals(input.QuantityAvailable))
                ) && 
                (
                    this.DigiKeyPartNumber == input.DigiKeyPartNumber ||
                    (this.DigiKeyPartNumber != null &&
                    this.DigiKeyPartNumber.Equals(input.DigiKeyPartNumber))
                ) && 
                (
                    this.ProductDescription == input.ProductDescription ||
                    (this.ProductDescription != null &&
                    this.ProductDescription.Equals(input.ProductDescription))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ManufacturerPublicQuantity == input.ManufacturerPublicQuantity ||
                    (this.ManufacturerPublicQuantity != null &&
                    this.ManufacturerPublicQuantity.Equals(input.ManufacturerPublicQuantity))
                ) && 
                (
                    this.QuantityOnOrder == input.QuantityOnOrder ||
                    (this.QuantityOnOrder != null &&
                    this.QuantityOnOrder.Equals(input.QuantityOnOrder))
                ) && 
                (
                    this.DKPlusRestriction == input.DKPlusRestriction ||
                    (this.DKPlusRestriction != null &&
                    this.DKPlusRestriction.Equals(input.DKPlusRestriction))
                ) && 
                (
                    this.SupplierDirectShip == input.SupplierDirectShip ||
                    (this.SupplierDirectShip != null &&
                    this.SupplierDirectShip.Equals(input.SupplierDirectShip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecommendedQuantity != null)
                    hashCode = hashCode * 59 + this.RecommendedQuantity.GetHashCode();
                if (this.MyPricing != null)
                    hashCode = hashCode * 59 + this.MyPricing.GetHashCode();
                if (this.Obsolete != null)
                    hashCode = hashCode * 59 + this.Obsolete.GetHashCode();
                if (this.MediaLinks != null)
                    hashCode = hashCode * 59 + this.MediaLinks.GetHashCode();
                if (this.StandardPackage != null)
                    hashCode = hashCode * 59 + this.StandardPackage.GetHashCode();
                if (this.LimitedTaxonomy != null)
                    hashCode = hashCode * 59 + this.LimitedTaxonomy.GetHashCode();
                if (this.Kits != null)
                    hashCode = hashCode * 59 + this.Kits.GetHashCode();
                if (this.KitContents != null)
                    hashCode = hashCode * 59 + this.KitContents.GetHashCode();
                if (this.MatingProducts != null)
                    hashCode = hashCode * 59 + this.MatingProducts.GetHashCode();
                if (this.SearchLocaleUsed != null)
                    hashCode = hashCode * 59 + this.SearchLocaleUsed.GetHashCode();
                if (this.AssociatedProducts != null)
                    hashCode = hashCode * 59 + this.AssociatedProducts.GetHashCode();
                if (this.ForUseWithProducts != null)
                    hashCode = hashCode * 59 + this.ForUseWithProducts.GetHashCode();
                if (this.RohsSubs != null)
                    hashCode = hashCode * 59 + this.RohsSubs.GetHashCode();
                if (this.SuggestedSubs != null)
                    hashCode = hashCode * 59 + this.SuggestedSubs.GetHashCode();
                if (this.AdditionalValueFee != null)
                    hashCode = hashCode * 59 + this.AdditionalValueFee.GetHashCode();
                if (this.ReachEffectiveDate != null)
                    hashCode = hashCode * 59 + this.ReachEffectiveDate.GetHashCode();
                if (this.StandardPricing != null)
                    hashCode = hashCode * 59 + this.StandardPricing.GetHashCode();
                if (this.RoHSStatus != null)
                    hashCode = hashCode * 59 + this.RoHSStatus.GetHashCode();
                if (this.LeadStatus != null)
                    hashCode = hashCode * 59 + this.LeadStatus.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.ProductUrl != null)
                    hashCode = hashCode * 59 + this.ProductUrl.GetHashCode();
                if (this.PrimaryDatasheet != null)
                    hashCode = hashCode * 59 + this.PrimaryDatasheet.GetHashCode();
                if (this.PrimaryPhoto != null)
                    hashCode = hashCode * 59 + this.PrimaryPhoto.GetHashCode();
                if (this.PrimaryVideo != null)
                    hashCode = hashCode * 59 + this.PrimaryVideo.GetHashCode();
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                if (this.ManufacturerLeadWeeks != null)
                    hashCode = hashCode * 59 + this.ManufacturerLeadWeeks.GetHashCode();
                if (this.ManufacturerPageUrl != null)
                    hashCode = hashCode * 59 + this.ManufacturerPageUrl.GetHashCode();
                if (this.ProductStatus != null)
                    hashCode = hashCode * 59 + this.ProductStatus.GetHashCode();
                if (this.DateLastBuyChance != null)
                    hashCode = hashCode * 59 + this.DateLastBuyChance.GetHashCode();
                if (this.AlternatePackaging != null)
                    hashCode = hashCode * 59 + this.AlternatePackaging.GetHashCode();
                if (this.DetailedDescription != null)
                    hashCode = hashCode * 59 + this.DetailedDescription.GetHashCode();
                if (this.ReachStatus != null)
                    hashCode = hashCode * 59 + this.ReachStatus.GetHashCode();
                if (this.ExportControlClassNumber != null)
                    hashCode = hashCode * 59 + this.ExportControlClassNumber.GetHashCode();
                if (this.HTSUSCode != null)
                    hashCode = hashCode * 59 + this.HTSUSCode.GetHashCode();
                if (this.TariffDescription != null)
                    hashCode = hashCode * 59 + this.TariffDescription.GetHashCode();
                if (this.ManufacturerPartNumber != null)
                    hashCode = hashCode * 59 + this.ManufacturerPartNumber.GetHashCode();
                if (this.MinimumOrderQuantity != null)
                    hashCode = hashCode * 59 + this.MinimumOrderQuantity.GetHashCode();
                if (this.NonStock != null)
                    hashCode = hashCode * 59 + this.NonStock.GetHashCode();
                if (this.Packaging != null)
                    hashCode = hashCode * 59 + this.Packaging.GetHashCode();
                if (this.QuantityAvailable != null)
                    hashCode = hashCode * 59 + this.QuantityAvailable.GetHashCode();
                if (this.DigiKeyPartNumber != null)
                    hashCode = hashCode * 59 + this.DigiKeyPartNumber.GetHashCode();
                if (this.ProductDescription != null)
                    hashCode = hashCode * 59 + this.ProductDescription.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.ManufacturerPublicQuantity != null)
                    hashCode = hashCode * 59 + this.ManufacturerPublicQuantity.GetHashCode();
                if (this.QuantityOnOrder != null)
                    hashCode = hashCode * 59 + this.QuantityOnOrder.GetHashCode();
                if (this.DKPlusRestriction != null)
                    hashCode = hashCode * 59 + this.DKPlusRestriction.GetHashCode();
                if (this.SupplierDirectShip != null)
                    hashCode = hashCode * 59 + this.SupplierDirectShip.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
