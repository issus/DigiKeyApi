/* 
 * PartSearch Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;


namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// A limited product model used for associated products.
    /// </summary>
    [DataContract]
    public partial class AssociatedProduct : IEquatable<AssociatedProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociatedProduct" /> class.
        /// </summary>
        /// <param name="productUrl">Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values..</param>
        /// <param name="manufacturerPartNumber">The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts..</param>
        /// <param name="minimumOrderQuantity">The minimum quantity to order from Digi-Key..</param>
        /// <param name="nonStock">Indicates this product is a non stock product..</param>
        /// <param name="packaging">packaging.</param>
        /// <param name="quantityAvailable">Quantity of the product available for immediate sale..</param>
        /// <param name="digiKeyPartNumber">The Digi-Key part number..</param>
        /// <param name="productDescription">Catalog description of the product..</param>
        /// <param name="unitPrice">The price for a single unit of this product..</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="manufacturerPublicQuantity">Quantity of this product available to order from manufacturer..</param>
        /// <param name="quantityOnOrder">Quantity of this product ordered but not immediately available..</param>
        /// <param name="dKPlusRestriction">If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site.</param>
        /// <param name="marketplace">Product is a Marketplace product that ships direct from the supplier.  A separate shipping fee may apply.</param>
        /// <param name="supplierDirectShip">If true- this product is shipped directly from the Supplier.</param>
        /// <param name="pimProductName">Pim name for the product.</param>
        /// <param name="supplier">The Supplier is the provider of the products to Digi-Key and some cases the customer directly..</param>
        /// <param name="supplierId">Id for Supplier.</param>
        public AssociatedProduct(string productUrl = default(string), string manufacturerPartNumber = default(string), int? minimumOrderQuantity = default(int?), bool? nonStock = default(bool?), PidVid packaging = default(PidVid), int? quantityAvailable = default(int?), string digiKeyPartNumber = default(string), string productDescription = default(string), double? unitPrice = default(double?), PidVid manufacturer = default(PidVid), int? manufacturerPublicQuantity = default(int?), int? quantityOnOrder = default(int?), bool? dKPlusRestriction = default(bool?), bool? marketplace = default(bool?), bool? supplierDirectShip = default(bool?), string pimProductName = default(string), string supplier = default(string), int? supplierId = default(int?))
        {
            this.ProductUrl = productUrl;
            this.ManufacturerPartNumber = manufacturerPartNumber;
            this.MinimumOrderQuantity = minimumOrderQuantity;
            this.NonStock = nonStock;
            this.Packaging = packaging;
            this.QuantityAvailable = quantityAvailable;
            this.DigiKeyPartNumber = digiKeyPartNumber;
            this.ProductDescription = productDescription;
            this.UnitPrice = unitPrice;
            this.Manufacturer = manufacturer;
            this.ManufacturerPublicQuantity = manufacturerPublicQuantity;
            this.QuantityOnOrder = quantityOnOrder;
            this.DKPlusRestriction = dKPlusRestriction;
            this.Marketplace = marketplace;
            this.SupplierDirectShip = supplierDirectShip;
            this.PimProductName = pimProductName;
            this.Supplier = supplier;
            this.SupplierId = supplierId;
        }

        /// <summary>
        /// Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.
        /// </summary>
        /// <value>Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.</value>
        [DataMember(Name = "ProductUrl", EmitDefaultValue = false)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts.
        /// </summary>
        /// <value>The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts.</value>
        [DataMember(Name = "ManufacturerPartNumber", EmitDefaultValue = false)]
        public string ManufacturerPartNumber { get; set; }

        /// <summary>
        /// The minimum quantity to order from Digi-Key.
        /// </summary>
        /// <value>The minimum quantity to order from Digi-Key.</value>
        [DataMember(Name = "MinimumOrderQuantity", EmitDefaultValue = false)]
        public int? MinimumOrderQuantity { get; set; }

        /// <summary>
        /// Indicates this product is a non stock product.
        /// </summary>
        /// <value>Indicates this product is a non stock product.</value>
        [DataMember(Name = "NonStock", EmitDefaultValue = false)]
        public bool? NonStock { get; set; }

        /// <summary>
        /// Gets or Sets Packaging
        /// </summary>
        [DataMember(Name = "Packaging", EmitDefaultValue = false)]
        public PidVid Packaging { get; set; }

        /// <summary>
        /// Quantity of the product available for immediate sale.
        /// </summary>
        /// <value>Quantity of the product available for immediate sale.</value>
        [DataMember(Name = "QuantityAvailable", EmitDefaultValue = false)]
        public int? QuantityAvailable { get; set; }

        /// <summary>
        /// The Digi-Key part number.
        /// </summary>
        /// <value>The Digi-Key part number.</value>
        [DataMember(Name = "DigiKeyPartNumber", EmitDefaultValue = false)]
        public string DigiKeyPartNumber { get; set; }

        /// <summary>
        /// Catalog description of the product.
        /// </summary>
        /// <value>Catalog description of the product.</value>
        [DataMember(Name = "ProductDescription", EmitDefaultValue = false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// The price for a single unit of this product.
        /// </summary>
        /// <value>The price for a single unit of this product.</value>
        [DataMember(Name = "UnitPrice", EmitDefaultValue = false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "Manufacturer", EmitDefaultValue = false)]
        public PidVid Manufacturer { get; set; }

        /// <summary>
        /// Quantity of this product available to order from manufacturer.
        /// </summary>
        /// <value>Quantity of this product available to order from manufacturer.</value>
        [DataMember(Name = "ManufacturerPublicQuantity", EmitDefaultValue = false)]
        public int? ManufacturerPublicQuantity { get; set; }

        /// <summary>
        /// Quantity of this product ordered but not immediately available.
        /// </summary>
        /// <value>Quantity of this product ordered but not immediately available.</value>
        [DataMember(Name = "QuantityOnOrder", EmitDefaultValue = false)]
        public int? QuantityOnOrder { get; set; }

        /// <summary>
        /// If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site
        /// </summary>
        /// <value>If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site</value>
        [DataMember(Name = "DKPlusRestriction", EmitDefaultValue = false)]
        public bool? DKPlusRestriction { get; set; }

        /// <summary>
        /// Product is a Marketplace product that ships direct from the supplier.  A separate shipping fee may apply
        /// </summary>
        /// <value>Product is a Marketplace product that ships direct from the supplier.  A separate shipping fee may apply</value>
        [DataMember(Name = "Marketplace", EmitDefaultValue = false)]
        public bool? Marketplace { get; set; }

        /// <summary>
        /// If true- this product is shipped directly from the Supplier
        /// </summary>
        /// <value>If true- this product is shipped directly from the Supplier</value>
        [DataMember(Name = "SupplierDirectShip", EmitDefaultValue = false)]
        public bool? SupplierDirectShip { get; set; }

        /// <summary>
        /// Pim name for the product
        /// </summary>
        /// <value>Pim name for the product</value>
        [DataMember(Name = "PimProductName", EmitDefaultValue = false)]
        public string PimProductName { get; set; }

        /// <summary>
        /// The Supplier is the provider of the products to Digi-Key and some cases the customer directly.
        /// </summary>
        /// <value>The Supplier is the provider of the products to Digi-Key and some cases the customer directly.</value>
        [DataMember(Name = "Supplier", EmitDefaultValue = false)]
        public string Supplier { get; set; }

        /// <summary>
        /// Id for Supplier
        /// </summary>
        /// <value>Id for Supplier</value>
        [DataMember(Name = "SupplierId", EmitDefaultValue = false)]
        public int? SupplierId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssociatedProduct {\n");
            sb.Append("  ProductUrl: ").Append(ProductUrl).Append("\n");
            sb.Append("  ManufacturerPartNumber: ").Append(ManufacturerPartNumber).Append("\n");
            sb.Append("  MinimumOrderQuantity: ").Append(MinimumOrderQuantity).Append("\n");
            sb.Append("  NonStock: ").Append(NonStock).Append("\n");
            sb.Append("  Packaging: ").Append(Packaging).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  DigiKeyPartNumber: ").Append(DigiKeyPartNumber).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerPublicQuantity: ").Append(ManufacturerPublicQuantity).Append("\n");
            sb.Append("  QuantityOnOrder: ").Append(QuantityOnOrder).Append("\n");
            sb.Append("  DKPlusRestriction: ").Append(DKPlusRestriction).Append("\n");
            sb.Append("  Marketplace: ").Append(Marketplace).Append("\n");
            sb.Append("  SupplierDirectShip: ").Append(SupplierDirectShip).Append("\n");
            sb.Append("  PimProductName: ").Append(PimProductName).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  SupplierId: ").Append(SupplierId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssociatedProduct);
        }

        /// <summary>
        /// Returns true if AssociatedProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of AssociatedProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssociatedProduct input)
        {
            if (input == null)
                return false;

            return
               (
                    this.ProductUrl == input.ProductUrl ||
                   (this.ProductUrl != null &&
                    this.ProductUrl.Equals(input.ProductUrl))
                ) &&
               (
                    this.ManufacturerPartNumber == input.ManufacturerPartNumber ||
                   (this.ManufacturerPartNumber != null &&
                    this.ManufacturerPartNumber.Equals(input.ManufacturerPartNumber))
                ) &&
               (
                    this.MinimumOrderQuantity == input.MinimumOrderQuantity ||
                   (this.MinimumOrderQuantity != null &&
                    this.MinimumOrderQuantity.Equals(input.MinimumOrderQuantity))
                ) &&
               (
                    this.NonStock == input.NonStock ||
                   (this.NonStock != null &&
                    this.NonStock.Equals(input.NonStock))
                ) &&
               (
                    this.Packaging == input.Packaging ||
                   (this.Packaging != null &&
                    this.Packaging.Equals(input.Packaging))
                ) &&
               (
                    this.QuantityAvailable == input.QuantityAvailable ||
                   (this.QuantityAvailable != null &&
                    this.QuantityAvailable.Equals(input.QuantityAvailable))
                ) &&
               (
                    this.DigiKeyPartNumber == input.DigiKeyPartNumber ||
                   (this.DigiKeyPartNumber != null &&
                    this.DigiKeyPartNumber.Equals(input.DigiKeyPartNumber))
                ) &&
               (
                    this.ProductDescription == input.ProductDescription ||
                   (this.ProductDescription != null &&
                    this.ProductDescription.Equals(input.ProductDescription))
                ) &&
               (
                    this.UnitPrice == input.UnitPrice ||
                   (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) &&
               (
                    this.Manufacturer == input.Manufacturer ||
                   (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) &&
               (
                    this.ManufacturerPublicQuantity == input.ManufacturerPublicQuantity ||
                   (this.ManufacturerPublicQuantity != null &&
                    this.ManufacturerPublicQuantity.Equals(input.ManufacturerPublicQuantity))
                ) &&
               (
                    this.QuantityOnOrder == input.QuantityOnOrder ||
                   (this.QuantityOnOrder != null &&
                    this.QuantityOnOrder.Equals(input.QuantityOnOrder))
                ) &&
               (
                    this.DKPlusRestriction == input.DKPlusRestriction ||
                   (this.DKPlusRestriction != null &&
                    this.DKPlusRestriction.Equals(input.DKPlusRestriction))
                ) &&
               (
                    this.Marketplace == input.Marketplace ||
                   (this.Marketplace != null &&
                    this.Marketplace.Equals(input.Marketplace))
                ) &&
               (
                    this.SupplierDirectShip == input.SupplierDirectShip ||
                   (this.SupplierDirectShip != null &&
                    this.SupplierDirectShip.Equals(input.SupplierDirectShip))
                ) &&
               (
                    this.PimProductName == input.PimProductName ||
                   (this.PimProductName != null &&
                    this.PimProductName.Equals(input.PimProductName))
                ) &&
               (
                    this.Supplier == input.Supplier ||
                   (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) &&
               (
                    this.SupplierId == input.SupplierId ||
                   (this.SupplierId != null &&
                    this.SupplierId.Equals(input.SupplierId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductUrl != null)
                    hashCode = hashCode * 59 + this.ProductUrl.GetHashCode();
                if (this.ManufacturerPartNumber != null)
                    hashCode = hashCode * 59 + this.ManufacturerPartNumber.GetHashCode();
                if (this.MinimumOrderQuantity != null)
                    hashCode = hashCode * 59 + this.MinimumOrderQuantity.GetHashCode();
                if (this.NonStock != null)
                    hashCode = hashCode * 59 + this.NonStock.GetHashCode();
                if (this.Packaging != null)
                    hashCode = hashCode * 59 + this.Packaging.GetHashCode();
                if (this.QuantityAvailable != null)
                    hashCode = hashCode * 59 + this.QuantityAvailable.GetHashCode();
                if (this.DigiKeyPartNumber != null)
                    hashCode = hashCode * 59 + this.DigiKeyPartNumber.GetHashCode();
                if (this.ProductDescription != null)
                    hashCode = hashCode * 59 + this.ProductDescription.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.ManufacturerPublicQuantity != null)
                    hashCode = hashCode * 59 + this.ManufacturerPublicQuantity.GetHashCode();
                if (this.QuantityOnOrder != null)
                    hashCode = hashCode * 59 + this.QuantityOnOrder.GetHashCode();
                if (this.DKPlusRestriction != null)
                    hashCode = hashCode * 59 + this.DKPlusRestriction.GetHashCode();
                if (this.Marketplace != null)
                    hashCode = hashCode * 59 + this.Marketplace.GetHashCode();
                if (this.SupplierDirectShip != null)
                    hashCode = hashCode * 59 + this.SupplierDirectShip.GetHashCode();
                if (this.PimProductName != null)
                    hashCode = hashCode * 59 + this.PimProductName.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.SupplierId != null)
                    hashCode = hashCode * 59 + this.SupplierId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
