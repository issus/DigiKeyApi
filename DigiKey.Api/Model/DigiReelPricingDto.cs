/* 
 * PartSearch Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;


namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// Response for Digi-Reel Pricing Request
    /// </summary>
    [DataContract]
    public partial class DigiReelPricingDto : IEquatable<DigiReelPricingDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DigiReelPricingDto" /> class.
        /// </summary>
        /// <param name="reelingFee">Fee per reel ordered..</param>
        /// <param name="unitPrice">Price of a single unit of the product..</param>
        /// <param name="extendedPrice">The total price of the requested reels and the reeling fee..</param>
        /// <param name="requestedQuantity">The passed in quantity of the product you are looking to create a Digi-Reel with..</param>
        /// <param name="searchLocaleUsed">searchLocaleUsed.</param>
        public DigiReelPricingDto(double? reelingFee = default(double?), double? unitPrice = default(double?), double? extendedPrice = default(double?), int? requestedQuantity = default(int?), IsoSearchLocale searchLocaleUsed = default(IsoSearchLocale))
        {
            this.ReelingFee = reelingFee;
            this.UnitPrice = unitPrice;
            this.ExtendedPrice = extendedPrice;
            this.RequestedQuantity = requestedQuantity;
            this.SearchLocaleUsed = searchLocaleUsed;
        }

        /// <summary>
        /// Fee per reel ordered.
        /// </summary>
        /// <value>Fee per reel ordered.</value>
        [DataMember(Name = "ReelingFee", EmitDefaultValue = false)]
        public double? ReelingFee { get; set; }

        /// <summary>
        /// Price of a single unit of the product.
        /// </summary>
        /// <value>Price of a single unit of the product.</value>
        [DataMember(Name = "UnitPrice", EmitDefaultValue = false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// The total price of the requested reels and the reeling fee.
        /// </summary>
        /// <value>The total price of the requested reels and the reeling fee.</value>
        [DataMember(Name = "ExtendedPrice", EmitDefaultValue = false)]
        public double? ExtendedPrice { get; set; }

        /// <summary>
        /// The passed in quantity of the product you are looking to create a Digi-Reel with.
        /// </summary>
        /// <value>The passed in quantity of the product you are looking to create a Digi-Reel with.</value>
        [DataMember(Name = "RequestedQuantity", EmitDefaultValue = false)]
        public int? RequestedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets SearchLocaleUsed
        /// </summary>
        [DataMember(Name = "SearchLocaleUsed", EmitDefaultValue = false)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DigiReelPricingDto {\n");
            sb.Append("  ReelingFee: ").Append(ReelingFee).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  ExtendedPrice: ").Append(ExtendedPrice).Append("\n");
            sb.Append("  RequestedQuantity: ").Append(RequestedQuantity).Append("\n");
            sb.Append("  SearchLocaleUsed: ").Append(SearchLocaleUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DigiReelPricingDto);
        }

        /// <summary>
        /// Returns true if DigiReelPricingDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DigiReelPricingDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DigiReelPricingDto input)
        {
            if (input == null)
                return false;

            return
               (
                    this.ReelingFee == input.ReelingFee ||
                   (this.ReelingFee != null &&
                    this.ReelingFee.Equals(input.ReelingFee))
                ) &&
               (
                    this.UnitPrice == input.UnitPrice ||
                   (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) &&
               (
                    this.ExtendedPrice == input.ExtendedPrice ||
                   (this.ExtendedPrice != null &&
                    this.ExtendedPrice.Equals(input.ExtendedPrice))
                ) &&
               (
                    this.RequestedQuantity == input.RequestedQuantity ||
                   (this.RequestedQuantity != null &&
                    this.RequestedQuantity.Equals(input.RequestedQuantity))
                ) &&
               (
                    this.SearchLocaleUsed == input.SearchLocaleUsed ||
                   (this.SearchLocaleUsed != null &&
                    this.SearchLocaleUsed.Equals(input.SearchLocaleUsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReelingFee != null)
                    hashCode = hashCode * 59 + this.ReelingFee.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.ExtendedPrice != null)
                    hashCode = hashCode * 59 + this.ExtendedPrice.GetHashCode();
                if (this.RequestedQuantity != null)
                    hashCode = hashCode * 59 + this.RequestedQuantity.GetHashCode();
                if (this.SearchLocaleUsed != null)
                    hashCode = hashCode * 59 + this.SearchLocaleUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
