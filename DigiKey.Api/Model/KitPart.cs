/* 
 * PartSearch Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;


namespace DigiKey.Api.Model
{
    /// <summary>
    /// Product contained within a Kit.
    /// </summary>
    [DataContract]
    public partial class KitPart : IEquatable<KitPart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KitPart" /> class.
        /// </summary>
        /// <param name="associatedProduct">associatedProduct.</param>
        /// <param name="kitPartQuantity">Number of the product in the Kit..</param>
        public KitPart(AssociatedProduct associatedProduct = default(AssociatedProduct), int? kitPartQuantity = default(int?))
        {
            this.AssociatedProduct = associatedProduct;
            this.KitPartQuantity = kitPartQuantity;
        }

        /// <summary>
        /// Gets or Sets AssociatedProduct
        /// </summary>
        [DataMember(Name = "AssociatedProduct", EmitDefaultValue = false)]
        public AssociatedProduct AssociatedProduct { get; set; }

        /// <summary>
        /// Number of the product in the Kit.
        /// </summary>
        /// <value>Number of the product in the Kit.</value>
        [DataMember(Name = "KitPartQuantity", EmitDefaultValue = false)]
        public int? KitPartQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KitPart {\n");
            sb.Append("  AssociatedProduct: ").Append(AssociatedProduct).Append("\n");
            sb.Append("  KitPartQuantity: ").Append(KitPartQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KitPart);
        }

        /// <summary>
        /// Returns true if KitPart instances are equal
        /// </summary>
        /// <param name="input">Instance of KitPart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KitPart input)
        {
            if (input == null)
                return false;

            return
               (
                    this.AssociatedProduct == input.AssociatedProduct ||
                   (this.AssociatedProduct != null &&
                    this.AssociatedProduct.Equals(input.AssociatedProduct))
                ) &&
               (
                    this.KitPartQuantity == input.KitPartQuantity ||
                   (this.KitPartQuantity != null &&
                    this.KitPartQuantity.Equals(input.KitPartQuantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssociatedProduct != null)
                    hashCode = hashCode * 59 + this.AssociatedProduct.GetHashCode();
                if (this.KitPartQuantity != null)
                    hashCode = hashCode * 59 + this.KitPartQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
