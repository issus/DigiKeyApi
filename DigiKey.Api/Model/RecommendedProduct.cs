/* 
 * RecommendedParts Api
 *
 * Provides a collection of recommended products for a given product. These are products that you may be interested in given your interest in the provided part number.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DigiKey.Api.Model
{
    /// <summary>
    /// The recommended product based on the submitted DigiKeyPartNumber.
    /// </summary>
    [DataContract]
    public partial class RecommendedProduct :  IEquatable<RecommendedProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendedProduct" /> class.
        /// </summary>
        /// <param name="digiKeyPartNumber">The Digi-Key part number..</param>
        /// <param name="manufacturerPartNumber">The manufacturer part number..</param>
        /// <param name="manufacturerName">The name of the manufacturer..</param>
        /// <param name="primaryPhoto">The URL to the product’s image..</param>
        /// <param name="productDescription">Catalog description of the product..</param>
        /// <param name="quantityAvailable">Quantity of the product available for immediate sale..</param>
        /// <param name="unitPrice">The catalog price for a single unit of this product..</param>
        /// <param name="productUrl">URL of the Digi-Key catalog page to purchase the product. This is based on your provided header Locale values..</param>
        public RecommendedProduct(string digiKeyPartNumber = default(string), string manufacturerPartNumber = default(string), string manufacturerName = default(string), string primaryPhoto = default(string), string productDescription = default(string), int? quantityAvailable = default(int?), double? unitPrice = default(double?), string productUrl = default(string))
        {
            this.DigiKeyPartNumber = digiKeyPartNumber;
            this.ManufacturerPartNumber = manufacturerPartNumber;
            this.ManufacturerName = manufacturerName;
            this.PrimaryPhoto = primaryPhoto;
            this.ProductDescription = productDescription;
            this.QuantityAvailable = quantityAvailable;
            this.UnitPrice = unitPrice;
            this.ProductUrl = productUrl;
        }
        
        /// <summary>
        /// The Digi-Key part number.
        /// </summary>
        /// <value>The Digi-Key part number.</value>
        [DataMember(Name="DigiKeyPartNumber", EmitDefaultValue=false)]
        public string DigiKeyPartNumber { get; set; }

        /// <summary>
        /// The manufacturer part number.
        /// </summary>
        /// <value>The manufacturer part number.</value>
        [DataMember(Name="ManufacturerPartNumber", EmitDefaultValue=false)]
        public string ManufacturerPartNumber { get; set; }

        /// <summary>
        /// The name of the manufacturer.
        /// </summary>
        /// <value>The name of the manufacturer.</value>
        [DataMember(Name="ManufacturerName", EmitDefaultValue=false)]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// The URL to the product’s image.
        /// </summary>
        /// <value>The URL to the product’s image.</value>
        [DataMember(Name="PrimaryPhoto", EmitDefaultValue=false)]
        public string PrimaryPhoto { get; set; }

        /// <summary>
        /// Catalog description of the product.
        /// </summary>
        /// <value>Catalog description of the product.</value>
        [DataMember(Name="ProductDescription", EmitDefaultValue=false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Quantity of the product available for immediate sale.
        /// </summary>
        /// <value>Quantity of the product available for immediate sale.</value>
        [DataMember(Name="QuantityAvailable", EmitDefaultValue=false)]
        public int? QuantityAvailable { get; set; }

        /// <summary>
        /// The catalog price for a single unit of this product.
        /// </summary>
        /// <value>The catalog price for a single unit of this product.</value>
        [DataMember(Name="UnitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// URL of the Digi-Key catalog page to purchase the product. This is based on your provided header Locale values.
        /// </summary>
        /// <value>URL of the Digi-Key catalog page to purchase the product. This is based on your provided header Locale values.</value>
        [DataMember(Name="ProductUrl", EmitDefaultValue=false)]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecommendedProduct {\n");
            sb.Append("  DigiKeyPartNumber: ").Append(DigiKeyPartNumber).Append("\n");
            sb.Append("  ManufacturerPartNumber: ").Append(ManufacturerPartNumber).Append("\n");
            sb.Append("  ManufacturerName: ").Append(ManufacturerName).Append("\n");
            sb.Append("  PrimaryPhoto: ").Append(PrimaryPhoto).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  ProductUrl: ").Append(ProductUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecommendedProduct);
        }

        /// <summary>
        /// Returns true if RecommendedProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of RecommendedProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecommendedProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DigiKeyPartNumber == input.DigiKeyPartNumber ||
                    (this.DigiKeyPartNumber != null &&
                    this.DigiKeyPartNumber.Equals(input.DigiKeyPartNumber))
                ) && 
                (
                    this.ManufacturerPartNumber == input.ManufacturerPartNumber ||
                    (this.ManufacturerPartNumber != null &&
                    this.ManufacturerPartNumber.Equals(input.ManufacturerPartNumber))
                ) && 
                (
                    this.ManufacturerName == input.ManufacturerName ||
                    (this.ManufacturerName != null &&
                    this.ManufacturerName.Equals(input.ManufacturerName))
                ) && 
                (
                    this.PrimaryPhoto == input.PrimaryPhoto ||
                    (this.PrimaryPhoto != null &&
                    this.PrimaryPhoto.Equals(input.PrimaryPhoto))
                ) && 
                (
                    this.ProductDescription == input.ProductDescription ||
                    (this.ProductDescription != null &&
                    this.ProductDescription.Equals(input.ProductDescription))
                ) && 
                (
                    this.QuantityAvailable == input.QuantityAvailable ||
                    (this.QuantityAvailable != null &&
                    this.QuantityAvailable.Equals(input.QuantityAvailable))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.ProductUrl == input.ProductUrl ||
                    (this.ProductUrl != null &&
                    this.ProductUrl.Equals(input.ProductUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DigiKeyPartNumber != null)
                    hashCode = hashCode * 59 + this.DigiKeyPartNumber.GetHashCode();
                if (this.ManufacturerPartNumber != null)
                    hashCode = hashCode * 59 + this.ManufacturerPartNumber.GetHashCode();
                if (this.ManufacturerName != null)
                    hashCode = hashCode * 59 + this.ManufacturerName.GetHashCode();
                if (this.PrimaryPhoto != null)
                    hashCode = hashCode * 59 + this.PrimaryPhoto.GetHashCode();
                if (this.ProductDescription != null)
                    hashCode = hashCode * 59 + this.ProductDescription.GetHashCode();
                if (this.QuantityAvailable != null)
                    hashCode = hashCode * 59 + this.QuantityAvailable.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.ProductUrl != null)
                    hashCode = hashCode * 59 + this.ProductUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
