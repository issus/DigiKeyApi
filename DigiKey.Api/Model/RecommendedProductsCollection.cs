/* 
 * RecommendedParts Api
 *
 * Provides a collection of recommended products for a given product. These are products that you may be interested in given your interest in the provided part number.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// The collection of recommended products for the given part number.
    /// </summary>
    [DataContract]
    public partial class RecommendedProductsCollection :  IEquatable<RecommendedProductsCollection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendedProductsCollection" /> class.
        /// </summary>
        /// <param name="partNumber">The part number that the recommendations are for..</param>
        /// <param name="recommendedProducts">The list of recommended products..</param>
        /// <param name="searchLocaleUsed">searchLocaleUsed.</param>
        public RecommendedProductsCollection(string partNumber = default(string), List<RecommendedProduct> recommendedProducts = default(List<RecommendedProduct>), IsoSearchLocale searchLocaleUsed = default(IsoSearchLocale))
        {
            this.PartNumber = partNumber;
            this.RecommendedProducts = recommendedProducts;
            this.SearchLocaleUsed = searchLocaleUsed;
        }
        
        /// <summary>
        /// The part number that the recommendations are for.
        /// </summary>
        /// <value>The part number that the recommendations are for.</value>
        [DataMember(Name="PartNumber", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// The list of recommended products.
        /// </summary>
        /// <value>The list of recommended products.</value>
        [DataMember(Name="RecommendedProducts", EmitDefaultValue=false)]
        public List<RecommendedProduct> RecommendedProducts { get; set; }

        /// <summary>
        /// Gets or Sets SearchLocaleUsed
        /// </summary>
        [DataMember(Name="SearchLocaleUsed", EmitDefaultValue=false)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecommendedProductsCollection {\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  RecommendedProducts: ").Append(RecommendedProducts).Append("\n");
            sb.Append("  SearchLocaleUsed: ").Append(SearchLocaleUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecommendedProductsCollection);
        }

        /// <summary>
        /// Returns true if RecommendedProductsCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of RecommendedProductsCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecommendedProductsCollection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.RecommendedProducts == input.RecommendedProducts ||
                    this.RecommendedProducts != null &&
                    this.RecommendedProducts.SequenceEqual(input.RecommendedProducts)
                ) && 
                (
                    this.SearchLocaleUsed == input.SearchLocaleUsed ||
                    (this.SearchLocaleUsed != null &&
                    this.SearchLocaleUsed.Equals(input.SearchLocaleUsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.RecommendedProducts != null)
                    hashCode = hashCode * 59 + this.RecommendedProducts.GetHashCode();
                if (this.SearchLocaleUsed != null)
                    hashCode = hashCode * 59 + this.SearchLocaleUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
