/* 
 * Product Change Notifications Api
 *
 * Display all Product Change Notifications for a given DigiKey product
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// The response containing the Product Change Notifications
    /// </summary>
    [DataContract]
    public partial class PcnResponse :  IEquatable<PcnResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PcnResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PcnResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PcnResponse" /> class.
        /// </summary>
        /// <param name="digiKeyPartNumber">The product for which we are returning the change notifications. (required).</param>
        /// <param name="productChangeNotifications">The list of change notifications for the requested product. (required).</param>
        public PcnResponse(string digiKeyPartNumber = default(string), List<ChangeNotification> productChangeNotifications = default(List<ChangeNotification>))
        {
            // to ensure "digiKeyPartNumber" is required (not null)
            if (digiKeyPartNumber == null)
            {
                throw new InvalidDataException("digiKeyPartNumber is a required property for PcnResponse and cannot be null");
            }
            else
            {
                this.DigiKeyPartNumber = digiKeyPartNumber;
            }
            // to ensure "productChangeNotifications" is required (not null)
            if (productChangeNotifications == null)
            {
                throw new InvalidDataException("productChangeNotifications is a required property for PcnResponse and cannot be null");
            }
            else
            {
                this.ProductChangeNotifications = productChangeNotifications;
            }
        }
        
        /// <summary>
        /// The product for which we are returning the change notifications.
        /// </summary>
        /// <value>The product for which we are returning the change notifications.</value>
        [DataMember(Name="DigiKeyPartNumber", EmitDefaultValue=false)]
        public string DigiKeyPartNumber { get; set; }

        /// <summary>
        /// The list of change notifications for the requested product.
        /// </summary>
        /// <value>The list of change notifications for the requested product.</value>
        [DataMember(Name="ProductChangeNotifications", EmitDefaultValue=false)]
        public List<ChangeNotification> ProductChangeNotifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PcnResponse {\n");
            sb.Append("  DigiKeyPartNumber: ").Append(DigiKeyPartNumber).Append("\n");
            sb.Append("  ProductChangeNotifications: ").Append(ProductChangeNotifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PcnResponse);
        }

        /// <summary>
        /// Returns true if PcnResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PcnResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PcnResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DigiKeyPartNumber == input.DigiKeyPartNumber ||
                    (this.DigiKeyPartNumber != null &&
                    this.DigiKeyPartNumber.Equals(input.DigiKeyPartNumber))
                ) && 
                (
                    this.ProductChangeNotifications == input.ProductChangeNotifications ||
                    this.ProductChangeNotifications != null &&
                    this.ProductChangeNotifications.SequenceEqual(input.ProductChangeNotifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DigiKeyPartNumber != null)
                    hashCode = hashCode * 59 + this.DigiKeyPartNumber.GetHashCode();
                if (this.ProductChangeNotifications != null)
                    hashCode = hashCode * 59 + this.ProductChangeNotifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
