/* 
 * Product Change Notifications Api
 *
 * Display all Product Change Notifications for a given DigiKey product
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// The change notification details.
    /// </summary>
    [DataContract]
    public partial class ChangeNotification :  IEquatable<ChangeNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeNotification" /> class.
        /// </summary>
        /// <param name="digiKeyPartNumber">The Digi-Key part number.</param>
        /// <param name="pcnChangeDate">The release date of the product change notification. Date is in ISO 8601..</param>
        /// <param name="pcnTypeId">The product change notification category id - this is included for easy sorting.</param>
        /// <param name="pcnType">The product change notification type - in the language of the user (if available) - otherwise English.</param>
        /// <param name="pcnDescription">A brief description of the change..</param>
        /// <param name="pcnLink">The link to the online pdf describing the change..</param>
        public ChangeNotification(string digiKeyPartNumber = default(string), string pcnChangeDate = default(string), string pcnTypeId = default(string), string pcnType = default(string), string pcnDescription = default(string), string pcnLink = default(string))
        {
            this.DigiKeyPartNumber = digiKeyPartNumber;
            this.PcnChangeDate = pcnChangeDate;
            this.PcnTypeId = pcnTypeId;
            this.PcnType = pcnType;
            this.PcnDescription = pcnDescription;
            this.PcnLink = pcnLink;
        }
        
        /// <summary>
        /// The Digi-Key part number
        /// </summary>
        /// <value>The Digi-Key part number</value>
        [DataMember(Name="DigiKeyPartNumber", EmitDefaultValue=false)]
        public string DigiKeyPartNumber { get; set; }

        /// <summary>
        /// The release date of the product change notification. Date is in ISO 8601.
        /// </summary>
        /// <value>The release date of the product change notification. Date is in ISO 8601.</value>
        [DataMember(Name="PcnChangeDate", EmitDefaultValue=false)]
        public string PcnChangeDate { get; set; }

        /// <summary>
        /// The product change notification category id - this is included for easy sorting
        /// </summary>
        /// <value>The product change notification category id - this is included for easy sorting</value>
        [DataMember(Name="PcnTypeId", EmitDefaultValue=false)]
        public string PcnTypeId { get; set; }

        /// <summary>
        /// The product change notification type - in the language of the user (if available) - otherwise English
        /// </summary>
        /// <value>The product change notification type - in the language of the user (if available) - otherwise English</value>
        [DataMember(Name="PcnType", EmitDefaultValue=false)]
        public string PcnType { get; set; }

        /// <summary>
        /// A brief description of the change.
        /// </summary>
        /// <value>A brief description of the change.</value>
        [DataMember(Name="PcnDescription", EmitDefaultValue=false)]
        public string PcnDescription { get; set; }

        /// <summary>
        /// The link to the online pdf describing the change.
        /// </summary>
        /// <value>The link to the online pdf describing the change.</value>
        [DataMember(Name="PcnLink", EmitDefaultValue=false)]
        public string PcnLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeNotification {\n");
            sb.Append("  DigiKeyPartNumber: ").Append(DigiKeyPartNumber).Append("\n");
            sb.Append("  PcnChangeDate: ").Append(PcnChangeDate).Append("\n");
            sb.Append("  PcnTypeId: ").Append(PcnTypeId).Append("\n");
            sb.Append("  PcnType: ").Append(PcnType).Append("\n");
            sb.Append("  PcnDescription: ").Append(PcnDescription).Append("\n");
            sb.Append("  PcnLink: ").Append(PcnLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeNotification);
        }

        /// <summary>
        /// Returns true if ChangeNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DigiKeyPartNumber == input.DigiKeyPartNumber ||
                    (this.DigiKeyPartNumber != null &&
                    this.DigiKeyPartNumber.Equals(input.DigiKeyPartNumber))
                ) && 
                (
                    this.PcnChangeDate == input.PcnChangeDate ||
                    (this.PcnChangeDate != null &&
                    this.PcnChangeDate.Equals(input.PcnChangeDate))
                ) && 
                (
                    this.PcnTypeId == input.PcnTypeId ||
                    (this.PcnTypeId != null &&
                    this.PcnTypeId.Equals(input.PcnTypeId))
                ) && 
                (
                    this.PcnType == input.PcnType ||
                    (this.PcnType != null &&
                    this.PcnType.Equals(input.PcnType))
                ) && 
                (
                    this.PcnDescription == input.PcnDescription ||
                    (this.PcnDescription != null &&
                    this.PcnDescription.Equals(input.PcnDescription))
                ) && 
                (
                    this.PcnLink == input.PcnLink ||
                    (this.PcnLink != null &&
                    this.PcnLink.Equals(input.PcnLink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DigiKeyPartNumber != null)
                    hashCode = hashCode * 59 + this.DigiKeyPartNumber.GetHashCode();
                if (this.PcnChangeDate != null)
                    hashCode = hashCode * 59 + this.PcnChangeDate.GetHashCode();
                if (this.PcnTypeId != null)
                    hashCode = hashCode * 59 + this.PcnTypeId.GetHashCode();
                if (this.PcnType != null)
                    hashCode = hashCode * 59 + this.PcnType.GetHashCode();
                if (this.PcnDescription != null)
                    hashCode = hashCode * 59 + this.PcnDescription.GetHashCode();
                if (this.PcnLink != null)
                    hashCode = hashCode * 59 + this.PcnLink.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
