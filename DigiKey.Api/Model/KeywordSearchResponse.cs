/* 
 * PartSearch Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;


namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// Response model for a keyword search request.
    /// </summary>
    [DataContract]
    public partial class KeywordSearchResponse : IEquatable<KeywordSearchResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeywordSearchResponse" /> class.
        /// </summary>
        /// <param name="limitedTaxonomy">limitedTaxonomy.</param>
        /// <param name="filterOptions">Available filters for narrowing down results..</param>
        /// <param name="products">List of products returned by KeywordSearch.</param>
        /// <param name="productsCount">Total number of matching products found..</param>
        /// <param name="exactManufacturerProductsCount">Number of exact ManufacturerPartNumber matches..</param>
        /// <param name="exactManufacturerProducts">List of products that are exact ManufacturerPartNumber matches..</param>
        /// <param name="exactDigiKeyProduct">exactDigiKeyProduct.</param>
        /// <param name="searchLocaleUsed">searchLocaleUsed.</param>
        public KeywordSearchResponse(LimitedTaxonomy limitedTaxonomy = default(LimitedTaxonomy), List<LimitedParameter> filterOptions = default(List<LimitedParameter>), List<Product> products = default(List<Product>), int? productsCount = default(int?), int? exactManufacturerProductsCount = default(int?), List<Product> exactManufacturerProducts = default(List<Product>), Product exactDigiKeyProduct = default(Product), IsoSearchLocale searchLocaleUsed = default(IsoSearchLocale))
        {
            this.LimitedTaxonomy = limitedTaxonomy;
            this.FilterOptions = filterOptions;
            this.Products = products;
            this.ProductsCount = productsCount;
            this.ExactManufacturerProductsCount = exactManufacturerProductsCount;
            this.ExactManufacturerProducts = exactManufacturerProducts;
            this.ExactDigiKeyProduct = exactDigiKeyProduct;
            this.SearchLocaleUsed = searchLocaleUsed;
        }

        /// <summary>
        /// Gets or Sets LimitedTaxonomy
        /// </summary>
        [DataMember(Name = "LimitedTaxonomy", EmitDefaultValue = false)]
        public LimitedTaxonomy LimitedTaxonomy { get; set; }

        /// <summary>
        /// Available filters for narrowing down results.
        /// </summary>
        /// <value>Available filters for narrowing down results.</value>
        [DataMember(Name = "FilterOptions", EmitDefaultValue = false)]
        public List<LimitedParameter> FilterOptions { get; set; }

        /// <summary>
        /// List of products returned by KeywordSearch
        /// </summary>
        /// <value>List of products returned by KeywordSearch</value>
        [DataMember(Name = "Products", EmitDefaultValue = false)]
        public List<Product> Products { get; set; }

        /// <summary>
        /// Total number of matching products found.
        /// </summary>
        /// <value>Total number of matching products found.</value>
        [DataMember(Name = "ProductsCount", EmitDefaultValue = false)]
        public int? ProductsCount { get; set; }

        /// <summary>
        /// Number of exact ManufacturerPartNumber matches.
        /// </summary>
        /// <value>Number of exact ManufacturerPartNumber matches.</value>
        [DataMember(Name = "ExactManufacturerProductsCount", EmitDefaultValue = false)]
        public int? ExactManufacturerProductsCount { get; set; }

        /// <summary>
        /// List of products that are exact ManufacturerPartNumber matches.
        /// </summary>
        /// <value>List of products that are exact ManufacturerPartNumber matches.</value>
        [DataMember(Name = "ExactManufacturerProducts", EmitDefaultValue = false)]
        public List<Product> ExactManufacturerProducts { get; set; }

        /// <summary>
        /// Gets or Sets ExactDigiKeyProduct
        /// </summary>
        [DataMember(Name = "ExactDigiKeyProduct", EmitDefaultValue = false)]
        public Product ExactDigiKeyProduct { get; set; }

        /// <summary>
        /// Gets or Sets SearchLocaleUsed
        /// </summary>
        [DataMember(Name = "SearchLocaleUsed", EmitDefaultValue = false)]
        public IsoSearchLocale SearchLocaleUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeywordSearchResponse {\n");
            sb.Append("  LimitedTaxonomy: ").Append(LimitedTaxonomy).Append("\n");
            sb.Append("  FilterOptions: ").Append(FilterOptions).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  ProductsCount: ").Append(ProductsCount).Append("\n");
            sb.Append("  ExactManufacturerProductsCount: ").Append(ExactManufacturerProductsCount).Append("\n");
            sb.Append("  ExactManufacturerProducts: ").Append(ExactManufacturerProducts).Append("\n");
            sb.Append("  ExactDigiKeyProduct: ").Append(ExactDigiKeyProduct).Append("\n");
            sb.Append("  SearchLocaleUsed: ").Append(SearchLocaleUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeywordSearchResponse);
        }

        /// <summary>
        /// Returns true if KeywordSearchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of KeywordSearchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeywordSearchResponse input)
        {
            if (input == null)
                return false;

            return
               (
                    this.LimitedTaxonomy == input.LimitedTaxonomy ||
                   (this.LimitedTaxonomy != null &&
                    this.LimitedTaxonomy.Equals(input.LimitedTaxonomy))
                ) &&
               (
                    this.FilterOptions == input.FilterOptions ||
                    this.FilterOptions != null &&
                    this.FilterOptions.SequenceEqual(input.FilterOptions)
                ) &&
               (
                    this.Products == input.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) &&
               (
                    this.ProductsCount == input.ProductsCount ||
                   (this.ProductsCount != null &&
                    this.ProductsCount.Equals(input.ProductsCount))
                ) &&
               (
                    this.ExactManufacturerProductsCount == input.ExactManufacturerProductsCount ||
                   (this.ExactManufacturerProductsCount != null &&
                    this.ExactManufacturerProductsCount.Equals(input.ExactManufacturerProductsCount))
                ) &&
               (
                    this.ExactManufacturerProducts == input.ExactManufacturerProducts ||
                    this.ExactManufacturerProducts != null &&
                    this.ExactManufacturerProducts.SequenceEqual(input.ExactManufacturerProducts)
                ) &&
               (
                    this.ExactDigiKeyProduct == input.ExactDigiKeyProduct ||
                   (this.ExactDigiKeyProduct != null &&
                    this.ExactDigiKeyProduct.Equals(input.ExactDigiKeyProduct))
                ) &&
               (
                    this.SearchLocaleUsed == input.SearchLocaleUsed ||
                   (this.SearchLocaleUsed != null &&
                    this.SearchLocaleUsed.Equals(input.SearchLocaleUsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LimitedTaxonomy != null)
                    hashCode = hashCode * 59 + this.LimitedTaxonomy.GetHashCode();
                if (this.FilterOptions != null)
                    hashCode = hashCode * 59 + this.FilterOptions.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.ProductsCount != null)
                    hashCode = hashCode * 59 + this.ProductsCount.GetHashCode();
                if (this.ExactManufacturerProductsCount != null)
                    hashCode = hashCode * 59 + this.ExactManufacturerProductsCount.GetHashCode();
                if (this.ExactManufacturerProducts != null)
                    hashCode = hashCode * 59 + this.ExactManufacturerProducts.GetHashCode();
                if (this.ExactDigiKeyProduct != null)
                    hashCode = hashCode * 59 + this.ExactDigiKeyProduct.GetHashCode();
                if (this.SearchLocaleUsed != null)
                    hashCode = hashCode * 59 + this.SearchLocaleUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
