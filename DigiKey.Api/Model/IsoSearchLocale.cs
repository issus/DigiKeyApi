/* 
 * PartSearch Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;


namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// The validated locale that was used for the search. If the provided locale was invalid, this will show the corrections.
    /// </summary>
    [DataContract]
    public partial class IsoSearchLocale : IEquatable<IsoSearchLocale>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IsoSearchLocale" /> class.
        /// </summary>
        /// <param name="site">The site used for the API call..</param>
        /// <param name="language">The language used for the API call. If the provided language is not valid for the site, it will be set to the site default..</param>
        /// <param name="currency">The currency used for the API call. If the provided currency is not valid for the site, it will be set to the site default..</param>
        /// <param name="shipToCountry">The destination for shipping the product. This is used for tariffs and regional pricing..</param>
        public IsoSearchLocale(string site = default(string), string language = default(string), string currency = default(string), string shipToCountry = default(string))
        {
            this.Site = site;
            this.Language = language;
            this.Currency = currency;
            this.ShipToCountry = shipToCountry;
        }

        /// <summary>
        /// The site used for the API call.
        /// </summary>
        /// <value>The site used for the API call.</value>
        [DataMember(Name = "Site", EmitDefaultValue = false)]
        public string Site { get; set; }

        /// <summary>
        /// The language used for the API call. If the provided language is not valid for the site, it will be set to the site default.
        /// </summary>
        /// <value>The language used for the API call. If the provided language is not valid for the site, it will be set to the site default.</value>
        [DataMember(Name = "Language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The currency used for the API call. If the provided currency is not valid for the site, it will be set to the site default.
        /// </summary>
        /// <value>The currency used for the API call. If the provided currency is not valid for the site, it will be set to the site default.</value>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// The destination for shipping the product. This is used for tariffs and regional pricing.
        /// </summary>
        /// <value>The destination for shipping the product. This is used for tariffs and regional pricing.</value>
        [DataMember(Name = "ShipToCountry", EmitDefaultValue = false)]
        public string ShipToCountry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IsoSearchLocale {\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ShipToCountry: ").Append(ShipToCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IsoSearchLocale);
        }

        /// <summary>
        /// Returns true if IsoSearchLocale instances are equal
        /// </summary>
        /// <param name="input">Instance of IsoSearchLocale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IsoSearchLocale input)
        {
            if (input == null)
                return false;

            return
               (
                    this.Site == input.Site ||
                   (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) &&
               (
                    this.Language == input.Language ||
                   (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) &&
               (
                    this.Currency == input.Currency ||
                   (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) &&
               (
                    this.ShipToCountry == input.ShipToCountry ||
                   (this.ShipToCountry != null &&
                    this.ShipToCountry.Equals(input.ShipToCountry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ShipToCountry != null)
                    hashCode = hashCode * 59 + this.ShipToCountry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
