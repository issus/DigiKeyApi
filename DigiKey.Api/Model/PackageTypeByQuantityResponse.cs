/* 
 * PackageTypeByQuantity Api
 *
 * PackageTypeByQuantity searches Digi-Key products and tries to find the best package types to purchase given a requested quantity and optional packaging preference. Made for Cut Tape, Tape and Reel, and Digi-Reel products.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace OriginalCircuit.DigiKey.Api.Model
{
    /// <summary>
    /// Response from a PackageTypeByQuantity Search Service request
    /// </summary>
    [DataContract]
    public partial class PackageTypeByQuantityResponse :  IEquatable<PackageTypeByQuantityResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageTypeByQuantityResponse" /> class.
        /// </summary>
        /// <param name="products">List of products that matched the PackageTypeByQuantitySearchService request..</param>
        public PackageTypeByQuantityResponse(List<PackageTypeByQuantityProduct> products = default(List<PackageTypeByQuantityProduct>))
        {
            this.Products = products;
        }
        
        /// <summary>
        /// List of products that matched the PackageTypeByQuantitySearchService request.
        /// </summary>
        /// <value>List of products that matched the PackageTypeByQuantitySearchService request.</value>
        [DataMember(Name="Products", EmitDefaultValue=false)]
        public List<PackageTypeByQuantityProduct> Products { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageTypeByQuantityResponse {\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageTypeByQuantityResponse);
        }

        /// <summary>
        /// Returns true if PackageTypeByQuantityResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageTypeByQuantityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageTypeByQuantityResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
