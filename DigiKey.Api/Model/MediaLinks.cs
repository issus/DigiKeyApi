/* 
 * PartSearch Api
 *
 * Search for products and retrieve details and pricing.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;


namespace DigiKey.Api.Model
{
    /// <summary>
    /// Media links for a product.
    /// </summary>
    [DataContract]
    public partial class MediaLinks : IEquatable<MediaLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaLinks" /> class.
        /// </summary>
        /// <param name="mediaType">The type of media..</param>
        /// <param name="title">The title of the media..</param>
        /// <param name="smallPhoto">URL to a small photo..</param>
        /// <param name="thumbnail">URL to the thumbnail image of the media..</param>
        /// <param name="url">URL of the media..</param>
        public MediaLinks(string mediaType = default(string), string title = default(string), string smallPhoto = default(string), string thumbnail = default(string), string url = default(string))
        {
            this.MediaType = mediaType;
            this.Title = title;
            this.SmallPhoto = smallPhoto;
            this.Thumbnail = thumbnail;
            this.Url = url;
        }

        /// <summary>
        /// The type of media.
        /// </summary>
        /// <value>The type of media.</value>
        [DataMember(Name = "MediaType", EmitDefaultValue = false)]
        public string MediaType { get; set; }

        /// <summary>
        /// The title of the media.
        /// </summary>
        /// <value>The title of the media.</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// URL to a small photo.
        /// </summary>
        /// <value>URL to a small photo.</value>
        [DataMember(Name = "SmallPhoto", EmitDefaultValue = false)]
        public string SmallPhoto { get; set; }

        /// <summary>
        /// URL to the thumbnail image of the media.
        /// </summary>
        /// <value>URL to the thumbnail image of the media.</value>
        [DataMember(Name = "Thumbnail", EmitDefaultValue = false)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// URL of the media.
        /// </summary>
        /// <value>URL of the media.</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaLinks {\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SmallPhoto: ").Append(SmallPhoto).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaLinks);
        }

        /// <summary>
        /// Returns true if MediaLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaLinks input)
        {
            if (input == null)
                return false;

            return
               (
                    this.MediaType == input.MediaType ||
                   (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                ) &&
               (
                    this.Title == input.Title ||
                   (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) &&
               (
                    this.SmallPhoto == input.SmallPhoto ||
                   (this.SmallPhoto != null &&
                    this.SmallPhoto.Equals(input.SmallPhoto))
                ) &&
               (
                    this.Thumbnail == input.Thumbnail ||
                   (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) &&
               (
                    this.Url == input.Url ||
                   (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.SmallPhoto != null)
                    hashCode = hashCode * 59 + this.SmallPhoto.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
